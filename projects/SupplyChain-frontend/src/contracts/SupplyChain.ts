/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "initialize_contract()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "add_item(uint64,address,byte,byte,byte,byte,byte)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_item(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "process_item(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pack_item(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sell_item(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "buy_item(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "ship_item(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "receive_item(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "purchase_item(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuc3VwcGx5X2NoYWluLmNvbnRyYWN0LlN1cHBseUNoYWluLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
  },
  "state": {
    "global": {
      "num_byte_slices": 4,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "consumer": {
          "type": "bytes",
          "key": "consumer"
        },
        "distributor": {
          "type": "bytes",
          "key": "distributor"
        },
        "farmer": {
          "type": "bytes",
          "key": "farmer"
        },
        "retailer": {
          "type": "bytes",
          "key": "retailer"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "SupplyChain",
    "methods": [
      {
        "name": "initialize_contract",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "add_item",
        "args": [
          {
            "type": "uint64",
            "name": "upc"
          },
          {
            "type": "address",
            "name": "farmerAddress"
          },
          {
            "type": "byte",
            "name": "farmName"
          },
          {
            "type": "byte",
            "name": "farmInfo"
          },
          {
            "type": "byte",
            "name": "longitude"
          },
          {
            "type": "byte",
            "name": "latitude"
          },
          {
            "type": "byte",
            "name": "productNotes"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "get_item",
        "args": [
          {
            "type": "uint64",
            "name": "upc"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "process_item",
        "args": [
          {
            "type": "uint64",
            "name": "upc"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "pack_item",
        "args": [
          {
            "type": "uint64",
            "name": "upc"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "sell_item",
        "args": [
          {
            "type": "uint64",
            "name": "upc"
          },
          {
            "type": "uint64",
            "name": "price"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "buy_item",
        "args": [
          {
            "type": "uint64",
            "name": "upc"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "ship_item",
        "args": [
          {
            "type": "uint64",
            "name": "upc"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "receive_item",
        "args": [
          {
            "type": "uint64",
            "name": "upc"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "purchase_item",
        "args": [
          {
            "type": "uint64",
            "name": "upc"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the SupplyChain smart contract.
 */
export type SupplyChain = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'initialize_contract()void' | 'initialize_contract', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'add_item(uint64,address,byte,byte,byte,byte,byte)void' | 'add_item', {
      argsObj: {
        upc: bigint | number
        farmerAddress: string
        farmName: number
        farmInfo: number
        longitude: number
        latitude: number
        productNotes: number
      }
      argsTuple: [upc: bigint | number, farmerAddress: string, farmName: number, farmInfo: number, longitude: number, latitude: number, productNotes: number]
      returns: void
    }>
    & Record<'get_item(uint64)uint64' | 'get_item', {
      argsObj: {
        upc: bigint | number
      }
      argsTuple: [upc: bigint | number]
      returns: bigint
    }>
    & Record<'process_item(uint64)void' | 'process_item', {
      argsObj: {
        upc: bigint | number
      }
      argsTuple: [upc: bigint | number]
      returns: void
    }>
    & Record<'pack_item(uint64)void' | 'pack_item', {
      argsObj: {
        upc: bigint | number
      }
      argsTuple: [upc: bigint | number]
      returns: void
    }>
    & Record<'sell_item(uint64,uint64)void' | 'sell_item', {
      argsObj: {
        upc: bigint | number
        price: bigint | number
      }
      argsTuple: [upc: bigint | number, price: bigint | number]
      returns: void
    }>
    & Record<'buy_item(uint64)void' | 'buy_item', {
      argsObj: {
        upc: bigint | number
      }
      argsTuple: [upc: bigint | number]
      returns: void
    }>
    & Record<'ship_item(uint64)void' | 'ship_item', {
      argsObj: {
        upc: bigint | number
      }
      argsTuple: [upc: bigint | number]
      returns: void
    }>
    & Record<'receive_item(uint64)void' | 'receive_item', {
      argsObj: {
        upc: bigint | number
      }
      argsTuple: [upc: bigint | number]
      returns: void
    }>
    & Record<'purchase_item(uint64)void' | 'purchase_item', {
      argsObj: {
        upc: bigint | number
      }
      argsTuple: [upc: bigint | number]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      consumer?: BinaryState
      distributor?: BinaryState
      farmer?: BinaryState
      retailer?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type SupplyChainSig = keyof SupplyChain['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends SupplyChainSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the SupplyChain smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends SupplyChainSig> = SupplyChain['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the SupplyChain smart contract to the method's return type
 */
export type MethodReturn<TSignature extends SupplyChainSig> = SupplyChain['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type SupplyChainCreateCalls = (typeof SupplyChainCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type SupplyChainCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type SupplyChainDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: SupplyChainCreateCalls) => SupplyChainCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class SupplyChainCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the SupplyChain smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the initialize_contract()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static initializeContract(args: MethodArgs<'initialize_contract()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'initialize_contract()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the add_item(uint64,address,byte,byte,byte,byte,byte)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addItem(args: MethodArgs<'add_item(uint64,address,byte,byte,byte,byte,byte)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'add_item(uint64,address,byte,byte,byte,byte,byte)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.upc, args.farmerAddress, args.farmName, args.farmInfo, args.longitude, args.latitude, args.productNotes],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_item(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getItem(args: MethodArgs<'get_item(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_item(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.upc],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the process_item(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static processItem(args: MethodArgs<'process_item(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'process_item(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.upc],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the pack_item(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static packItem(args: MethodArgs<'pack_item(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'pack_item(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.upc],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the sell_item(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static sellItem(args: MethodArgs<'sell_item(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'sell_item(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.upc, args.price],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the buy_item(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static buyItem(args: MethodArgs<'buy_item(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'buy_item(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.upc],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the ship_item(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static shipItem(args: MethodArgs<'ship_item(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'ship_item(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.upc],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the receive_item(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static receiveItem(args: MethodArgs<'receive_item(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'receive_item(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.upc],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the purchase_item(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static purchaseItem(args: MethodArgs<'purchase_item(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'purchase_item(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.upc],
      ...params,
    }
  }
}

/**
 * A client to make calls to the SupplyChain smart contract
 */
export class SupplyChainClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `SupplyChainClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof SupplyChain['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the SupplyChain smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: SupplyChainDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(SupplyChainCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the SupplyChain smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the SupplyChain smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the initialize_contract()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public initializeContract(args: MethodArgs<'initialize_contract()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SupplyChainCallFactory.initializeContract(args, params))
  }

  /**
   * Calls the add_item(uint64,address,byte,byte,byte,byte,byte)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addItem(args: MethodArgs<'add_item(uint64,address,byte,byte,byte,byte,byte)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SupplyChainCallFactory.addItem(args, params))
  }

  /**
   * Calls the get_item(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getItem(args: MethodArgs<'get_item(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SupplyChainCallFactory.getItem(args, params))
  }

  /**
   * Calls the process_item(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public processItem(args: MethodArgs<'process_item(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SupplyChainCallFactory.processItem(args, params))
  }

  /**
   * Calls the pack_item(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public packItem(args: MethodArgs<'pack_item(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SupplyChainCallFactory.packItem(args, params))
  }

  /**
   * Calls the sell_item(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public sellItem(args: MethodArgs<'sell_item(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SupplyChainCallFactory.sellItem(args, params))
  }

  /**
   * Calls the buy_item(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public buyItem(args: MethodArgs<'buy_item(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SupplyChainCallFactory.buyItem(args, params))
  }

  /**
   * Calls the ship_item(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public shipItem(args: MethodArgs<'ship_item(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SupplyChainCallFactory.shipItem(args, params))
  }

  /**
   * Calls the receive_item(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public receiveItem(args: MethodArgs<'receive_item(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SupplyChainCallFactory.receiveItem(args, params))
  }

  /**
   * Calls the purchase_item(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public purchaseItem(args: MethodArgs<'purchase_item(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SupplyChainCallFactory.purchaseItem(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<SupplyChain['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get consumer() {
        return SupplyChainClient.getBinaryState(state, 'consumer')
      },
      get distributor() {
        return SupplyChainClient.getBinaryState(state, 'distributor')
      },
      get farmer() {
        return SupplyChainClient.getBinaryState(state, 'farmer')
      },
      get retailer() {
        return SupplyChainClient.getBinaryState(state, 'retailer')
      },
    }
  }

  public compose(): SupplyChainComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      initializeContract(args: MethodArgs<'initialize_contract()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.initializeContract(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addItem(args: MethodArgs<'add_item(uint64,address,byte,byte,byte,byte,byte)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addItem(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getItem(args: MethodArgs<'get_item(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getItem(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      processItem(args: MethodArgs<'process_item(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.processItem(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      packItem(args: MethodArgs<'pack_item(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.packItem(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      sellItem(args: MethodArgs<'sell_item(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.sellItem(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      buyItem(args: MethodArgs<'buy_item(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.buyItem(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      shipItem(args: MethodArgs<'ship_item(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.shipItem(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      receiveItem(args: MethodArgs<'receive_item(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.receiveItem(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      purchaseItem(args: MethodArgs<'purchase_item(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.purchaseItem(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as SupplyChainComposer
  }
}
export type SupplyChainComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initialize_contract()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initializeContract(args: MethodArgs<'initialize_contract()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SupplyChainComposer<[...TReturns, MethodReturn<'initialize_contract()void'>]>

  /**
   * Calls the add_item(uint64,address,byte,byte,byte,byte,byte)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addItem(args: MethodArgs<'add_item(uint64,address,byte,byte,byte,byte,byte)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SupplyChainComposer<[...TReturns, MethodReturn<'add_item(uint64,address,byte,byte,byte,byte,byte)void'>]>

  /**
   * Calls the get_item(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getItem(args: MethodArgs<'get_item(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SupplyChainComposer<[...TReturns, MethodReturn<'get_item(uint64)uint64'>]>

  /**
   * Calls the process_item(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  processItem(args: MethodArgs<'process_item(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SupplyChainComposer<[...TReturns, MethodReturn<'process_item(uint64)void'>]>

  /**
   * Calls the pack_item(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  packItem(args: MethodArgs<'pack_item(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SupplyChainComposer<[...TReturns, MethodReturn<'pack_item(uint64)void'>]>

  /**
   * Calls the sell_item(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sellItem(args: MethodArgs<'sell_item(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SupplyChainComposer<[...TReturns, MethodReturn<'sell_item(uint64,uint64)void'>]>

  /**
   * Calls the buy_item(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buyItem(args: MethodArgs<'buy_item(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SupplyChainComposer<[...TReturns, MethodReturn<'buy_item(uint64)void'>]>

  /**
   * Calls the ship_item(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  shipItem(args: MethodArgs<'ship_item(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SupplyChainComposer<[...TReturns, MethodReturn<'ship_item(uint64)void'>]>

  /**
   * Calls the receive_item(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  receiveItem(args: MethodArgs<'receive_item(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SupplyChainComposer<[...TReturns, MethodReturn<'receive_item(uint64)void'>]>

  /**
   * Calls the purchase_item(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  purchaseItem(args: MethodArgs<'purchase_item(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SupplyChainComposer<[...TReturns, MethodReturn<'purchase_item(uint64)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the SupplyChain smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): SupplyChainComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): SupplyChainComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<SupplyChainComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<SupplyChainComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type SupplyChainComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type SupplyChainComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
